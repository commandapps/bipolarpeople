
===== PACKAGE.JSON =====

{
  "name": "bipolarpeople",
  "version": "0.1.1",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@auth/core": "^0.41.1",
    "@auth/pg-adapter": "^1.11.1",
    "@headlessui/react": "^2.2.8",
    "@heroicons/react": "^2.2.0",
    "@vercel/postgres": "^0.10.0",
    "bcryptjs": "^3.0.2",
    "clsx": "^2.1.1",
    "dotenv": "^17.2.3",
    "next": "15.5.3",
    "next-auth": "^5.0.0-beta.29",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "resend": "^6.3.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.3",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


===== SRC/LIB/AUTH.TS =====
/* eslint-disable @typescript-eslint/no-explicit-any */
import NextAuth from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import { db } from './db'
import bcrypt from 'bcryptjs'

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials: any) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        const user = await db.getUserByEmail(credentials.email)
        if (!user) {
          return null
        }

        const isPasswordValid = await bcrypt.compare(credentials.password, user.password_hash)
        if (!isPasswordValid) {
          return null
        }

        return {
          id: user.id.toString(),
          email: user.email,
          name: user.display_name || user.username,
          username: user.username,
        }
      }
    })
  ],
  session: {
    strategy: 'jwt' as const,
  },
  callbacks: {
    async jwt({ token, user }: any) {
      if (user) {
        token.username = user.username
      }
      return token
    },
    async session({ session, token }: any) {
      if (token) {
        session.user.id = token.sub
        session.user.username = token.username
      }
      return session
    }
  },
  pages: {
    signIn: '/login',
    signUp: '/register',
  },
  secret: process.env.AUTH_SECRET,
}

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }
export const auth = handler


===== SRC/LIB/DB.TS =====
import { sql } from '@vercel/postgres';

export interface User {
  id: number;
  email: string;
  username: string;
  display_name: string | null;
  password_hash: string;
  email_verified: boolean;
  discourse_user_id: number | null;
  created_at: Date;
  updated_at: Date;
}

export interface Session {
  id: number;
  user_id: number;
  session_token: string;
  expires: Date;
}

export const db = {
  // User operations
  async getUserByEmail(email: string): Promise<User | null> {
    const result = await sql`
      SELECT * FROM users WHERE email = ${email} LIMIT 1
    `;
    return result.rows[0] as User || null;
  },

  async getUserById(id: number): Promise<User | null> {
    const result = await sql`
      SELECT * FROM users WHERE id = ${id} LIMIT 1
    `;
    return result.rows[0] as User || null;
  },

  async createUser(data: {
    email: string;
    username: string;
    password_hash: string;
    display_name?: string;
  }): Promise<User> {
    const result = await sql`
      INSERT INTO users (email, username, password_hash, display_name)
      VALUES (${data.email}, ${data.username}, ${data.password_hash}, ${data.display_name || null})
      RETURNING *
    `;
    return result.rows[0] as User;
  },

  async updateUser(id: number, data: Partial<User>): Promise<User> {
    const result = await sql`
      UPDATE users 
      SET 
        email = COALESCE(${data.email}, email),
        username = COALESCE(${data.username}, username),
        display_name = COALESCE(${data.display_name}, display_name),
        email_verified = COALESCE(${data.email_verified}, email_verified),
        updated_at = CURRENT_TIMESTAMP
      WHERE id = ${id}
      RETURNING *
    `;
    return result.rows[0] as User;
  },

  async updateUserPassword(id: number, hashedPassword: string): Promise<void> {
    await sql`
      UPDATE users 
      SET password_hash = ${hashedPassword}, updated_at = CURRENT_TIMESTAMP
      WHERE id = ${id}
    `;
  },

  // Token operations
  async createVerificationToken(userId: number, token: string): Promise<void> {
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours
    await sql`
      INSERT INTO verification_tokens (user_id, token, expires_at)
      VALUES (${userId}, ${token}, ${expiresAt.toISOString()})
    `;
  },

  async getVerificationToken(token: string) {
    const result = await sql`
      SELECT * FROM verification_tokens 
      WHERE token = ${token} AND expires_at > NOW()
      LIMIT 1
    `;
    return result.rows[0] || null;
  },

  async deleteVerificationToken(token: string): Promise<void> {
    await sql`DELETE FROM verification_tokens WHERE token = ${token}`;
  },

  // Password reset tokens
  async createPasswordResetToken(userId: number, token: string): Promise<void> {
    const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 hour
    await sql`
      INSERT INTO password_reset_tokens (user_id, token, expires_at)
      VALUES (${userId}, ${token}, ${expiresAt.toISOString()})
    `;
  },

  async getPasswordResetToken(token: string) {
    const result = await sql`
      SELECT * FROM password_reset_tokens 
      WHERE token = ${token} AND expires_at > NOW()
      LIMIT 1
    `;
    return result.rows[0] || null;
  },

  async deletePasswordResetToken(token: string): Promise<void> {
    await sql`DELETE FROM password_reset_tokens WHERE token = ${token}`;
  },

  // Session operations (for NextAuth)
  async createSession(userId: number, sessionToken: string, expires: Date): Promise<void> {
    await sql`
      INSERT INTO sessions (user_id, session_token, expires)
      VALUES (${userId}, ${sessionToken}, ${expires.toISOString()})
    `;
  },

  async getSession(sessionToken: string): Promise<Session | null> {
    const result = await sql`
      SELECT * FROM sessions 
      WHERE session_token = ${sessionToken} AND expires > NOW()
      LIMIT 1
    `;
    return result.rows[0] as Session || null;
  },

  async deleteSession(sessionToken: string): Promise<void> {
    await sql`DELETE FROM sessions WHERE session_token = ${sessionToken}`;
  },
};

===== SRC/LIB/EMAIL.TS =====
import { Resend } from 'resend'

export async function sendVerificationEmail(email: string, token: string) {
  const resend = new Resend(process.env.RESEND_API_KEY)
  const verificationUrl = `${process.env.AUTH_URL || 'http://localhost:3004'}/verify-email?token=${token}`
  
  try {
    await resend.emails.send({
      from: process.env.EMAIL_FROM || 'noreply@bipolarpeople.com',
      to: email,
      subject: 'Verify your email address - Bipolar People',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #2563eb;">Welcome to Bipolar People</h1>
          <p>Thank you for registering! Please verify your email address by clicking the button below:</p>
          <a href="${verificationUrl}" style="display: inline-block; background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0;">
            Verify Email Address
          </a>
          <p>If the button doesn't work, you can copy and paste this link into your browser:</p>
          <p style="word-break: break-all; color: #666;">${verificationUrl}</p>
          <p>This link will expire in 24 hours.</p>
          <p>Best regards,<br>The Bipolar People Team</p>
        </div>
      `,
    })
  } catch (error) {
    console.error('Failed to send verification email:', error)
    throw new Error('Failed to send verification email')
  }
}

export async function sendPasswordResetEmail(email: string, token: string, name: string = 'there') {
  const resend = new Resend(process.env.RESEND_API_KEY)
  const resetUrl = `${process.env.AUTH_URL || 'http://localhost:3004'}/reset-password?token=${token}`
  
  try {
    await resend.emails.send({
      from: process.env.EMAIL_FROM || 'noreply@bipolarpeople.com',
      to: email,
      subject: 'Reset your password - Bipolar People',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #2563eb;">Password Reset Request</h1>
          <p>You requested to reset your password. Click the button below to set a new password:</p>
          <a href="${resetUrl}" style="display: inline-block; background-color: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0;">
            Reset Password
          </a>
          <p>If the button doesn't work, you can copy and paste this link into your browser:</p>
          <p style="word-break: break-all; color: #666;">${resetUrl}</p>
          <p>This link will expire in 1 hour.</p>
          <p>If you didn't request this password reset, please ignore this email.</p>
          <p>Best regards,<br>The Bipolar People Team</p>
        </div>
      `,
    })
  } catch (error) {
    console.error('Failed to send password reset email:', error)
    throw new Error('Failed to send password reset email')
  }
}

export async function sendPasswordChangedEmail(email: string, name: string = 'there') {
  const resend = new Resend(process.env.RESEND_API_KEY)
  
  try {
    await resend.emails.send({
      from: process.env.EMAIL_FROM || 'noreply@bipolarpeople.com',
      to: email,
      subject: 'Password changed - Bipolar People',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #2563eb;">Password Changed Successfully</h1>
          <p>Hi ${name},</p>
          <p>Your password has been successfully changed for your Bipolar People account.</p>
          <p>If you didn't make this change, please contact our support team immediately.</p>
          <p>For security reasons, you may need to log in again on all your devices.</p>
          <p>Best regards,<br>The Bipolar People Team</p>
        </div>
      `,
    })
  } catch (error) {
    console.error('Failed to send password changed email:', error)
    throw new Error('Failed to send password changed email')
  }
}


===== SRC/APP/API/AUTH/REGISTER/ROUTE.TS =====
import { NextRequest, NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';
import { db } from '@/lib/db';
import { sendVerificationEmail } from '@/lib/email';
import crypto from 'crypto';

export async function POST(request: NextRequest) {
  try {
    const { email, username, password } = await request.json();

    // Validation
    if (!email || !username || !password) {
      return NextResponse.json(
        { error: 'All fields are required' },
        { status: 400 }
      );
    }

    if (password.length < 8) {
      return NextResponse.json(
        { error: 'Password must be at least 8 characters' },
        { status: 400 }
      );
    }

    // Check if user exists
    const existingUser = await db.getUserByEmail(email);
    if (existingUser) {
      return NextResponse.json(
        { error: 'Email already registered' },
        { status: 400 }
      );
    }

    // Hash password
    const password_hash = await bcrypt.hash(password, 10);

    // Create user
    const user = await db.createUser({
      email,
      username,
      password_hash,
      display_name: username,
    });

    // Generate verification token
    const verificationToken = crypto.randomBytes(32).toString('hex');
    await db.createVerificationToken(user.id, verificationToken);

    // Send verification email
    await sendVerificationEmail(email, verificationToken);

    return NextResponse.json({
      success: true,
      message: 'Registration successful. Please check your email to verify your account.',
    });
    } catch (error: unknown) {
    console.error('Registration error:', error);
    return NextResponse.json(
      { error: 'Registration failed. Please try again.' },
      { status: 500 }
    );
  }
}

===== SRC/APP/API/AUTH/VERIFY-EMAIL/ROUTE.TS =====
import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token = searchParams.get('token')

  if (!token) {
    return NextResponse.json(
      { error: 'Verification token is required' },
      { status: 400 }
    )
  }

  try {
    const verificationToken = await db.getVerificationToken(token)
    
    if (!verificationToken) {
      return NextResponse.json(
        { error: 'Invalid or expired verification token' },
        { status: 400 }
      )
    }

    // Mark user as verified
    await db.updateUser(verificationToken.user_id, { email_verified: true })
    
    // Delete the verification token
    await db.deleteVerificationToken(token)

    return NextResponse.json({
      success: true,
      message: 'Email verified successfully'
    })
  } catch (error: unknown) {
    console.error('Email verification error:', error)
    return NextResponse.json(
      { error: 'Email verification failed' },
      { status: 500 }
    )
  }
}


===== SRC/APP/LAYOUT.TSX =====
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import Navigation from '@/components/layout/Navigation'
import Footer from '@/components/Footer'
import { SessionProvider } from 'next-auth/react'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Bipolar People - Community & Resources for Bipolar Disorder',
  description: 'A trusted, compassionate online community and resource hub for people living with bipolar disorder, their families, caregivers, and mental health professionals.',
  keywords: 'bipolar disorder, mental health, community, support, resources, mood tracking',
  openGraph: {
    title: 'Bipolar People - Community & Resources for Bipolar Disorder',
    description: 'A trusted, compassionate online community and resource hub for people living with bipolar disorder.',
    type: 'website',
    url: 'https://bipolarpeople.com',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Bipolar People - Community & Resources for Bipolar Disorder',
    description: 'A trusted, compassionate online community and resource hub for people living with bipolar disorder.',
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className="scroll-smooth">
      <body className={`${inter.className} antialiased`}>
        <SessionProvider>
          <Navigation />
          <main className="min-h-screen">
            {children}
          </main>
          <Footer />
        </SessionProvider>
      </body>
    </html>
  )
}


===== SRC/APP/LOGIN/PAGE.TSX =====
'use client';

import { useState, Suspense } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

function LoginForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const result = await signIn('credentials', {
        email: formData.email,
        password: formData.password,
        redirect: false,
      });

      if (result?.error) {
        setError(result.error);
        setLoading(false);
        return;
      }

      // Redirect to callback URL or community page
      const callbackUrl = searchParams.get('callbackUrl') || '/community';
      router.push(callbackUrl);
      router.refresh();
    } catch (err: unknown) {
      setError('Login failed. Please try again.');
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Welcome Back</h1>
          <p className="text-gray-600">Log in to access your account</p>
        </div>

        {/* Form */}
        <div className="bg-white rounded-xl shadow-lg p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {error && (
              <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded">
                <p className="text-red-700 text-sm">{error}</p>
              </div>
            )}

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                Email Address
              </label>
              <input
                id="email"
                type="email"
                required
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="you@example.com"
              />
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Password
                </label>
                <Link 
                  href="/forgot-password" 
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  Forgot password?
                </Link>
              </div>
              <input
                id="password"
                type="password"
                required
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your password"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Logging in...' : 'Log In'}
            </button>
          </form>

          <p className="mt-6 text-center text-sm text-gray-600">
            Don't have an account?{' '}
            <Link href="/register" className="text-blue-600 hover:text-blue-800 font-medium">
              Sign up
            </Link>
          </p>
        </div>

        {/* Crisis Resources */}
        <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center">
          <p className="text-sm text-yellow-800">
            <strong>In crisis?</strong> Call 988 or visit{' '}
            <Link href="/crisis-resources" className="underline">crisis resources</Link>
          </p>
        </div>
      </div>
    </div>
  );
}

export default function LoginPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <LoginForm />
    </Suspense>
  );
}

===== SRC/COMPONENTS/AUTH/USERMENU.TSX =====
'use client';

import { useSession, signOut } from 'next-auth/react';
import Link from 'next/link';
import { useState, useRef, useEffect } from 'react';

export default function UserMenu() {
  const { data: session, status } = useSession();
  const [isOpen, setIsOpen] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);

  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  if (status === 'loading') {
    return (
      <div className="w-8 h-8 bg-gray-200 rounded-full animate-pulse"></div>
    );
  }

  if (!session) {
    return (
      <div className="flex items-center gap-3">
        <Link
          href="/login"
          className="text-gray-700 hover:text-blue-600 font-medium text-sm transition-colors"
        >
          Log In
        </Link>
        <Link
          href="/register"
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
        >
          Sign Up
        </Link>
      </div>
    );
  }

  return (
    <div className="relative" ref={menuRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 hover:bg-gray-100 rounded-lg px-3 py-2 transition-colors"
      >
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
          {session.user?.name?.[0]?.toUpperCase() || 'U'}
        </div>
        <span className="hidden md:block text-sm font-medium text-gray-700">
          {session.user?.name}
        </span>
        <svg 
          className={`w-4 h-4 text-gray-500 transition-transform ${isOpen ? 'rotate-180' : ''}`}
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-xl border border-gray-100 py-2 z-50">
          <div className="px-4 py-3 border-b border-gray-100">
            <p className="text-sm font-medium text-gray-900">{session.user?.name}</p>
            <p className="text-xs text-gray-500 truncate">{session.user?.email}</p>
          </div>
          
          <Link
            href="/profile"
            className="flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-blue-50 transition-colors"
            onClick={() => setIsOpen(false)}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            My Profile
          </Link>

          <a
            href={`${process.env.NEXT_PUBLIC_DISCOURSE_URL || 'https://bipolarpeople.discourse.group'}/session/sso`}
            className="flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-blue-50 transition-colors"
            onClick={() => setIsOpen(false)}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            Community Forum
          </a>

          <button
            onClick={() => {
              setIsOpen(false);
              signOut({ callbackUrl: '/' });
            }}
            className="flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors w-full text-left"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
            </svg>
            Log Out
          </button>
        </div>
      )}
    </div>
  );
}

===== ENV VARIABLES (NAMES ONLY) =====


# Created by Vercel CLI
AUTH_SECRET
AUTH_URL
DATABASE_URL
DATABASE_URL_UNPOOLED
DISCOURSE_SSO_SECRET
DISCOURSE_URL
EMAIL_FROM
NEON_PROJECT_ID
PGDATABASE
PGHOST
PGHOST_UNPOOLED
PGPASSWORD
PGUSER
POSTGRES_DATABASE
POSTGRES_HOST
POSTGRES_PASSWORD
POSTGRES_PRISMA_URL
POSTGRES_URL
POSTGRES_URL_NON_POOLING
POSTGRES_URL_NO_SSL
POSTGRES_USER
RESEND_API_KEY
VERCEL_OIDC_TOKEN


===== CHECKING FOR NEXTAUTH API ROUTE =====
File exists
import { NextRequest } from 'next/server'
import { authOptions } from '@/lib/auth'
import NextAuth from 'next-auth'

const handler = NextAuth(authOptions)

export async function GET(request: NextRequest) {
  // @ts-expect-error - NextAuth v5 beta compatibility issue
  return handler(request)
}

export async function POST(request: NextRequest) {
  // @ts-expect-error - NextAuth v5 beta compatibility issue
  return handler(request)
}
